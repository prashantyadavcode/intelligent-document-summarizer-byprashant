from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import json
import time
import asyncio
from datetime import datetime
from typing import Dict, Any

app = FastAPI()

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/api/process")
async def process_document(file: UploadFile = File(...)):
    """
    Test endpoint to process uploaded documents
    """
    try:
        start_time = time.time()
        
        # Validate file type
        if not file.content_type in ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword', 'text/plain']:
            raise HTTPException(status_code=400, detail="Unsupported file type")
        
        # Read file content
        content = await file.read()
        
        # Simulate processing time
        await asyncio.sleep(2)
        
        processing_time = time.time() - start_time
        
        # Mock response data
        result = {
            "summary": f"This is a mock summary of the document '{file.filename}'. The document contains approximately {len(content)} bytes of data. This is a placeholder summary that would be generated by AI models in the full implementation.",
            "qaPairs": [
                {
                    "question": f"What is the main topic of {file.filename}?",
                    "answer": "This is a mock answer. The actual answer would be generated by AI models.",
                    "difficulty": "medium"
                },
                {
                    "question": f"How long is the document {file.filename}?",
                    "answer": f"The document is approximately {len(content)} bytes long.",
                    "difficulty": "easy"
                }
            ],
            "flashcards": [
                {
                    "front": f"Document: {file.filename}",
                    "back": f"This document contains {len(content)} bytes of data.",
                    "category": "general",
                    "difficulty": "easy"
                },
                {
                    "front": "File size",
                    "back": f"{len(content)} bytes",
                    "category": "technical",
                    "difficulty": "easy"
                }
            ],
            "metadata": {
                "filename": file.filename,
                "wordCount": len(content.split()) if isinstance(content, str) else len(str(content).split()),
                "processingTime": round(processing_time, 2),
                "timestamp": datetime.now().isoformat()
            }
        }
        
        return JSONResponse(content=result)
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Processing failed: {str(e)}")

@app.get("/api/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

# For Vercel deployment
def handler(request):
    return app(request)
